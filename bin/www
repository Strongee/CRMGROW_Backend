#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('myapp:server');
const http = require('http');
const socketIO = require('socket.io');

const mongoose = require('mongoose');
const app = require('../app');
const tracker = require('../controllers/tracker');
const Video = require('../models/video');
const jwt = require('jsonwebtoken');
const api = require('../config/api');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const { DB_PORT } = require('../config/database');
const uuidv1 = require('uuid/v1');
const fs = require('fs');
const { GIF_PATH } = require('../config/path');

/**
 * Connect Monogo Database.
 */

mongoose.set('useCreateIndex', true);

mongoose
  .connect(DB_PORT, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log('Connecting to database successful'))
  .catch((err) => console.error('Could not connect to mongo DB', err));

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIO(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

tracker.setup(io);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('App listening on', bind);
  debug('Listening on ' + bind);
}

const fileStreams = {};
const fileStreamSizeStatus = {};
io.sockets.on('connection', (socket) => {
  socket.on('initVideo', () => {
    const videoId = uuidv1();
    const ws = fs.createWriteStream(GIF_PATH + videoId + `.webm`);
    fileStreams[videoId] = ws;
    fileStreamSizeStatus[videoId] = 0;
    socket.emit('createdVideo', { video: videoId });
  });
  socket.on('pushVideoData', (data) => {
    const videoId = data.videoId;
    const blob = data.data;
    if (!fileStreams[videoId]) {
      fileStreams[videoId] = fs.createWriteStream(
        GIF_PATH + videoId + `.webm`,
        { flags: 'a' }
      );
      const stats = fs.statSync(GIF_PATH + videoId + `.webm`);
      fileStreamSizeStatus[videoId] = stats.size;
    }
    if (data.sentSize === fileStreamSizeStatus[videoId]) {
      console.log(
        'already received : ',
        data.sentSize,
        fileStreamSizeStatus[videoId]
      );
      socket.emit('receivedVideoData', {
        receivedSize: fileStreamSizeStatus[videoId],
      });
    } else {
      let bufferSize = 0;
      blob.forEach((e) => {
        fileStreams[videoId].write(e);
        bufferSize += e.length;
      });
      fileStreamSizeStatus[videoId] += bufferSize;
      console.log('Saved : ', data.sentSize, fileStreamSizeStatus[videoId]);
      socket.emit('receivedVideoData', {
        receivedSize: fileStreamSizeStatus[videoId],
      });
    }
  });
  socket.on('saveVideo', async (data) => {
    const videoId = data.videoId;
    fileStreams[videoId].close();

    const token = data.token;
    let decoded;
    try {
      decoded = jwt.verify(token, api.JWT_SECRET);
    } catch (err) {
      socket.emit('failedSaveVideo');
    }
    if (token) {
      const video = new Video({
        url: GIF_PATH + videoId + `.webm`,
        user: decoded.id,
        created_at: new Date(),
      });
      video
        .save()
        .then((_video) => {
          socket.emit('savedVideo', { video: _video.id });
        })
        .catch((err) => {
          socket.emit('failedSaveVideo');
        });
    }
  });
  socket.on('cancelRecord', (data) => {
    const videoId = data.videoId;
    fs.unlinkSync(GIF_PATH + videoId + `.webm`);
    socket.emit('removedVideo');
  });
});
